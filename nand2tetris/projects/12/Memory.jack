// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heapBase
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block;
        var Array curr;
        var boolean seen;

        let block = 0;
        let curr = freeList;
        let seen = 0;

        while ((block = 0) & ~seen) {
            if (curr[0] = 0) {
                let seen = 1;
            }
            
            if ((curr[1] > (size + 2)) | (curr[1] = (size + 2))) {
                let block = curr + curr[1] - size;
                let ram[block - 1] = size;
                let curr[1] = curr[1] - size - 2;
            } else {
                let curr = curr[0];
            }
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = o - 2;
        let ram[block] = freeList;
        let freeList = block;
        return;
    }    
}
