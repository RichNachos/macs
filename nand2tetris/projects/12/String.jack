// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array s;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let s = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let s[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, chr;
        var boolean negate;

        let negate = false;
        let value = 0;
        let i = 0;
        let chr = 0;

        if (s[0] = 45) { // '-' == 45
            let negate = true;
            let s[0] = 48; // '0'
        }
        
        while (i < length) {
            let chr = s[i] - 48; // normalize to 0
            if ((chr < 0) | (chr > 9)) {
                return value;
            }
            let value = value * 10 + chr;
            let i = i + 1;
        } 

        if (negate) {
            return -value;
        }
        return value;
    }

    method void intToString(int value) {
        var int digit;
        let digit = (value - (value / 10 * 10)) + 48; // +48 to normalize as char
        if (~(value < 10)) {
            do intToString(value / 10);
        }
        do appendChar(digit);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int value) {
        let length = 0;
        if (value < 0) {
            let value = -value;
            do appendChar(45); // '-'
        }
        do intToString(value);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
